server:
  port: 8081

spring:
  application:
    name: organizationservice   #Every service registered with Eureka will have two components associated with it: the application ID and the instance ID. The application ID is used to represent a group service instance. In a Spring-Boot-based microservice, the application ID will always be the value set by the spring.application.name property
  profiles:
    active: default
  cloud:
    config:
      enabled: true

eureka:
  instance:
    preferIpAddress: true        # Register the IP of the service rather than the server name
  client:
    registerWithEureka: true     # Tell the organization service to register itself with Eureka
    fetchRegistry: true          # Tell the Spring Eureka Client to fetch a local copy of the registry. Setting this attribute to true will cache the registry locally instead of calling the Eureka service with every lookup
    serviceUrl:
      defaultZone: http://localhost:8761/eureka    #holds a comma-separated list of Eureka services the client will use to resolve to service locations

# Your protected resource then has to call back to the OAuth2 service to see if the token is valid.
# You define the callback URL in your organization serviceâ€™s application.yml file as the property security.oauth2.resource.userInfoUri

security:
  oauth2:
    resource:
      user-info-uri: http://localhost:8901/auth/user